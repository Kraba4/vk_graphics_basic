#version 430
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require

#include "common.h"

layout( local_size_x = 1024 ) in;

layout(std430, binding = 0) buffer a 
{
    Particle particles[];
};

layout( push_constant ) uniform params {
   float dt;
} PushConstant;

void main() 
{
    float timeToLive = particles[gl_LocalInvocationIndex].positionAndTimeToLive.w;
    if (timeToLive > 0) {
        vec3 position = particles[gl_LocalInvocationIndex].positionAndTimeToLive.xyz;
        vec3 velocity = particles[gl_LocalInvocationIndex].velocity.xyz;
        const float dt = PushConstant.dt;
        float speed = 0.4;
        velocity += 8.0 * vec3(0, 1, 0) * dt;
        position += speed * normalize(velocity) * dt;
        timeToLive -= dt;
        particles[gl_LocalInvocationIndex].positionAndTimeToLive = vec4(position, timeToLive);
        particles[gl_LocalInvocationIndex].velocity = vec4(velocity, 0);
    }
}